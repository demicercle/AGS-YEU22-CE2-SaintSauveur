// main global script file

// Global INT
// 100: fenetre
// 101: livre
// 102: bijoux
// 103: ryder gaffe
// 104: ryder follow

// 00012102110

// called when the game starts, before the first room is loaded
function game_start()
{
  // register a GUI to use for the inventory bar
  TwoClickHandler.InventoryGUI = gInventoryBar;

  // register a Label to use for action text
  TwoClickHandler.ActionLabel = lblAction;

  // optionally set the popup distance for the inventory bar
  //TwoClickHandler.PopupProportional = 0.5;
  //TwoClickHandler.PopupDistance = 50;

  // optionally reverse the left and right mouse buttons
  //TwoClickHandler.ReversedClicks = true;
  
  cJournaliste.Transparency = 100;
  cJournaliste.Clickable = false;
  lJournal.Text = "";
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// open a GUI
function open_gui(GUI* gui_to_open)
{
  TwoClickHandler.Close();
  mouse.UseModeGraphic(eModeWalkto);
  gui_to_open.Visible = true;
}

// hide a GUI
function close_gui(GUI *gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else if (gRestoreGame.Visible)
    {
      close_gui(gRestoreGame);
    }
    else if (gSaveGame.Visible)
    {
      close_gui(gSaveGame);
    }
    else
    {
      // Escape will prompt to exit the game
      open_gui(gExitGame);
    }
  }
  else if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will open the save game dialog
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will open the restore game dialog
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
  else if (keycode == eKeyCtrlC)
  {
    if(player.Room == 2)
    {
      cRyder.ChangeRoom(2);
      cRyder.LockView(7);
      SetGlobalInt(104, 1);
    }
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button == eMouseLeftInv) {
    inventory[game.inv_activated].RunInteraction(mouse.Mode);
  }
  else if (button == eMouseRightInv) {
    if (player.ActiveInventory != null) player.ActiveInventory = null; // active item? drop it
    else inventory[game.inv_activated].RunInteraction(eModeInteract); // interact with item
  }
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      //player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("Rien.");
      //player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("Mais où ai-je la tête ?");
      //player.Say("That won't do anything.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      //player.Say("Qu'est-ce que c'est ?");
      //player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("Rien...");
      //player.Say("I don't want to have it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("Drôle d'idée !");
     // player.Say("That's a funny idea.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hum...");
    }
    else if (type == 1) // interact
    {
      player.Say("Rien à dire...");
      //player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("Hum... Ca ne l'intéressera probablement pas.");
      //player.Say("I don't think I should give that away.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      //player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Hum...");
      //player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      //player.Say("That's ridiculous.");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnExitGame_OnClick(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }

  // find first free save slot, starting with slot 1
  i = 1;

  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }

    i ++;
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function cCure_AnyClick()
{
  player.Walk(cCure.x + 30, cCure.y, eBlock, eWalkableAreas);
  player.FaceCharacter(cCure);
  if(GetGlobalInt(104)==1)
  {
    dDialog8.Start();
  }
  else
  {
    dDialog4.Start();
  }
}

function cRyder_AnyClick()
{
  player.Walk(cRyder.x + 30, cRyder.y, eBlock, eWalkableAreas);
  player.FaceCharacter(cRyder);
  dDialog6.Start();
}

function gEnd_OnClick(GUI *theGui, MouseButton button)
{
}

String PianoCode;

function bPianoButton_OnClick(GUIControl *control, MouseButton button)
{
  Button *btn = control.AsButton;
  AudioClip *clips[] = new AudioClip[8];
  clips[0] = aPianoC1;
  clips[1] = aPianoD1;
  clips[2] = aPianoE1;
  clips[3] = aPianoF1;
  clips[4] = aPianoG1;
  clips[5] = aPianoA1;
  clips[6] = aPianoB1;
  clips[7] = aPianoC2;
  clips[btn.ID].Play();
  //Wait(10);
  
  if(PianoCode==null)
    PianoCode = "";
  
  PianoCode = PianoCode.Append(String.Format("%d",btn.ID));
  
  while(PianoCode.Length > PIANO_CODE.Length)
  {
    PianoCode = PianoCode.Substring(1, PianoCode.Length-1);
  }
  
  if(PianoCode == PIANO_CODE)
  {
    Display("Bravo !");
    //aAU_CLAIR_DE_LA_LUNE_GROUPE.Play();
    //WaitSeconds(5.0);
    WaitSeconds(1.0);
    gOrgue.Visible = false;
    CallRoomScript(1);
  }
}

function bBack_OnClick(GUIControl *control, MouseButton button)
{
  gOrgue.Visible = false;
}

/*int pageJournal;

function gJournal_OnClick(GUI *theGui, MouseButton button)
{
  if(pageJournal==0)
  {
    cJournaliste.Say("&1 Les bijoux du Christ ont été volés cette nuit à l'église de Saint-Sauveur à l'île d'Yeu !");
    //lJournal.Text = "Les bijoux du Christ ont été volés cette nuit à l'église de Saint-Sauveur à l'île d'Yeu !";
  }
  else if(pageJournal==1)
  {
    cJournaliste.Say("&2 Avis à tous les détectives : il faut retrouver le voleur.");
    //lJournal.Text = "Avis à tous les détectives : il faut retrouver le voleur.";
  }
  else
  {
    FadeOut(5);
    gJournal.Visible = false;
    FadeIn(5);
    CallRoomScript(1);
  }
  
  pageJournal+=1;
}*/

function gJournal_OnClick(GUI *theGui, MouseButton button)
{
  dDialog0.Start();
}

function gTitre_OnClick(GUI *theGui, MouseButton button)
{
  aNARR1.Play();
  WaitSeconds(3.0);
  FadeOut(5);
  gTitre.Visible = false;
  gJournal.Visible = true;
  FadeIn(5);
}

function gBook_OnClick(GUI *theGui, MouseButton button)
{
  //gBook.Visible = false;
}

function iLivre_Interact()
{
  dDialog9.Start();
}
