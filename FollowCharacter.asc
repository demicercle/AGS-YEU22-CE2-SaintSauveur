// new module script
FollowCharacter followChars[1000];
int lastID = 0;

float GetCharacterDistance(Character* c1,  Character* c2)
{
  int cx = c1.x;
  int cy = c1.y;
  int px = c2.x;
  int py = c2.y;
  int dx = cx - px;
  int dy = cy - py;
  return Maths.Sqrt(IntToFloat(dx*dx+dy*dy));
}

function FollowCharacter::Update()
{
  if(this.c1 != null && this.c2 != null)
  {
    
      if(this.c2.Room != this.c1.Room)
      {
        this.c1.ChangeRoom(this.c2.Room, this.c2.x, this.c2.y);
      }
      
    
    if(this.timerID != 0 && IsTimerExpired(this.timerID))
    {
      this.timerID = 0;
    }
    
    int d = FloatToInt(GetCharacterDistance(this.c1, this.c2));
    if(this.timerID == 0 && d > this.dist)
    {
      this.c1.Walk(this.c2.x, this.c2.y, eNoBlock, eWalkableAreas);
      this.timerID = this.id + 1;
      SetTimer(this.timerID, 100);
    }
    if(d <= this.dist)
    {
      this.c1.StopMoving();
    }
  }
}

function FollowCharacter::Reverse()
{
  Character *temp = this.c1;
  this.c1 = this.c2;
  this.c2 = temp;
}

function StartFollow(Character *c1, Character *c2, int dist)
{
  followChars[lastID].id = lastID;
  followChars[lastID].c1 = c1;
  followChars[lastID].c2 = c2;
  followChars[lastID].dist = dist;
  lastID += 1;
}

function StopFollow(Character *c1, Character *c2)
{
  for(int i = 0; i < 100; i++)
  {
    if(followChars[i].c1 == c1 && followChars[i].c2 == c2)
    {
      followChars[i].c1 = null;
      followChars[i].c2 = null;
    }
  }
}


function repeatedly_execute_always()
{
  for(int i = 0; i < 1000; i++)
  {
    followChars[i].Update();
  }
}